// Code generated by MockGen. DO NOT EDIT.
// Source: docker_validator.go

// Package validate is a generated GoMock package.
package validate

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCloudFoundryValidator is a mock of dockerRepositoryValidator interface
type MockCloudFoundryValidator struct {
	ctrl     *gomock.Controller
	recorder *MockCloudFoundryValidatorMockRecorder
}

// MockCloudFoundryValidatorMockRecorder is the mock recorder for MockCloudFoundryValidator
type MockCloudFoundryValidatorMockRecorder struct {
	mock *MockCloudFoundryValidator
}

// NewMockCloudFoundryValidator creates a new mock instance
func NewMockCloudFoundryValidator(ctrl *gomock.Controller) *MockCloudFoundryValidator {
	mock := &MockCloudFoundryValidator{ctrl: ctrl}
	mock.recorder = &MockCloudFoundryValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudFoundryValidator) EXPECT() *MockCloudFoundryValidatorMockRecorder {
	return m.recorder
}

// repository mocks base method
func (m *MockCloudFoundryValidator) info(registry cloudFoundryAccount, service *cloudFoundryService) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "info", registry, service)
	ret0, _ := ret[0].([]error)
	return ret0
}

// repository indicates an expected call of repository
func (mr *MockCloudFoundryValidatorMockRecorder) info(registry, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "info", reflect.TypeOf((*MockCloudFoundryValidator)(nil).info), registry, service)
}
