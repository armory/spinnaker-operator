// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package interfaces

import (
	spec "k8s.io/kube-openapi/pkg/validation/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/spinnaker/interfaces.AccountConfig":                schema_pkg_apis_spinnaker_interfaces_AccountConfig(ref),
		"./pkg/apis/spinnaker/interfaces.ExposeConfig":                 schema_pkg_apis_spinnaker_interfaces_ExposeConfig(ref),
		"./pkg/apis/spinnaker/interfaces.ExposeConfigService":          schema_pkg_apis_spinnaker_interfaces_ExposeConfigService(ref),
		"./pkg/apis/spinnaker/interfaces.ExposeConfigServiceOverrides": schema_pkg_apis_spinnaker_interfaces_ExposeConfigServiceOverrides(ref),
		"./pkg/apis/spinnaker/interfaces.HashStatus":                   schema_pkg_apis_spinnaker_interfaces_HashStatus(ref),
		"./pkg/apis/spinnaker/interfaces.KubernetesAuth":               schema_pkg_apis_spinnaker_interfaces_KubernetesAuth(ref),
		"./pkg/apis/spinnaker/interfaces.Kustomization":                schema_pkg_apis_spinnaker_interfaces_Kustomization(ref),
		"./pkg/apis/spinnaker/interfaces.SecretInNamespaceReference":   schema_pkg_apis_spinnaker_interfaces_SecretInNamespaceReference(ref),
		"./pkg/apis/spinnaker/interfaces.ServiceKustomization":         schema_pkg_apis_spinnaker_interfaces_ServiceKustomization(ref),
		"./pkg/apis/spinnaker/interfaces.SpinnakerAccountSpec":         schema_pkg_apis_spinnaker_interfaces_SpinnakerAccountSpec(ref),
		"./pkg/apis/spinnaker/interfaces.SpinnakerAccountStatus":       schema_pkg_apis_spinnaker_interfaces_SpinnakerAccountStatus(ref),
		"./pkg/apis/spinnaker/interfaces.SpinnakerDeploymentStatus":    schema_pkg_apis_spinnaker_interfaces_SpinnakerDeploymentStatus(ref),
		"./pkg/apis/spinnaker/interfaces.SpinnakerServiceSpec":         schema_pkg_apis_spinnaker_interfaces_SpinnakerServiceSpec(ref),
		"./pkg/apis/spinnaker/interfaces.SpinnakerServiceStatus":       schema_pkg_apis_spinnaker_interfaces_SpinnakerServiceStatus(ref),
		"./pkg/apis/spinnaker/interfaces.SpinnakerValidation":          schema_pkg_apis_spinnaker_interfaces_SpinnakerValidation(ref),
		"./pkg/apis/spinnaker/interfaces.ValidationSetting":            schema_pkg_apis_spinnaker_interfaces_ValidationSetting(ref),
	}
}

func schema_pkg_apis_spinnaker_interfaces_AccountConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable the injection of SpinnakerAccount",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"dynamic": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable accounts to be added dynamically",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_spinnaker_interfaces_ExposeConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExposeConfig represents the configuration for exposing Spinnaker",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"service": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/spinnaker/interfaces.ExposeConfigService"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/spinnaker/interfaces.ExposeConfigService"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_ExposeConfigService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExposeConfigService represents the configuration for exposing Spinnaker using k8s services",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"publicPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"overrides": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.ExposeConfigServiceOverrides"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/spinnaker/interfaces.ExposeConfigServiceOverrides"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_ExposeConfigServiceOverrides(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExposeConfigServiceOverrides represents expose configurations of type service, overriden by specific services",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"publicPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_spinnaker_interfaces_HashStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"hash": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastUpdatedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"hash"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_KubernetesAuth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kubeconfigFile": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeconfigFile referenced as an encrypted secret",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kubeconfigSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubeconfig referenced as a Kubernetes secret",
							Ref:         ref("./pkg/apis/spinnaker/interfaces.SecretInNamespaceReference"),
						},
					},
					"kubeconfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubeconfig config referenced directly",
							Ref:         ref("k8s.io/client-go/tools/clientcmd/api/v1.Config"),
						},
					},
					"useServiceAccount": {
						SchemaProps: spec.SchemaProps{
							Description: "UseServiceAccount authenticate to the target cluster using the service account mounted in Spinnaker's pods",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/spinnaker/interfaces.SecretInNamespaceReference", "k8s.io/client-go/tools/clientcmd/api/v1.Config"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_Kustomization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"patchesStrategicMerge": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "list",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "PatchesStrategicMerge specifies the relative path to a file containing a strategic merge patch.  Format documented at https://github.com/kubernetes/community/blob/master/contributors/devel/strategic-merge-patch.md URLs and globs are not supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"patchesJson6902": {
						SchemaProps: spec.SchemaProps{
							Description: "JSONPatches is a list of JSONPatch for applying JSON patch. Format documented at https://tools.ietf.org/html/rfc6902 and http://jsonpatch.com",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"patches": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "list",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Patches is a list of patches, where each one can be either a Strategic Merge Patch or a JSON patch. Each patch can be applied to multiple target objects.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_spinnaker_interfaces_SecretInNamespaceReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "key"},
			},
		},
	}
}

func schema_pkg_apis_spinnaker_interfaces_ServiceKustomization(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"service": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/spinnaker/interfaces.Kustomization"),
						},
					},
					"deployment": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/spinnaker/interfaces.Kustomization"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/spinnaker/interfaces.Kustomization"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_SpinnakerAccountSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpinnakerAccountSpec defines the desired state of SpinnakerAccount",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"validation": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/spinnaker/interfaces.ValidationSetting"),
						},
					},
					"permissions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type: []string{"array"},
										Items: &spec.SchemaOrArray{
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type:   []string{"string"},
													Format: "",
												},
											},
										},
									},
								},
							},
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/spinnaker/interfaces.KubernetesAuth"),
						},
					},
					"settings": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"enabled", "type"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/spinnaker/interfaces.KubernetesAuth", "./pkg/apis/spinnaker/interfaces.ValidationSetting"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_SpinnakerAccountStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpinnakerAccountStatus defines the observed state of SpinnakerAccount",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"invalidReason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastValidatedAt": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Timestamp"),
						},
					},
				},
				Required: []string{"invalidReason", "lastValidatedAt"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Timestamp"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_SpinnakerDeploymentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpinnakerDeploymentStatus represents the deployment status of a single service",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the service deployed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image deployed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"readyReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of ready pods targeted by this deployment.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_spinnaker_interfaces_SpinnakerServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpinnakerServiceSpec defines the desired state of SpinnakerService",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"spinnakerConfig": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/spinnaker/interfaces.SpinnakerConfig"),
						},
					},
					"validation": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/spinnaker/interfaces.SpinnakerValidation"),
						},
					},
					"expose": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/spinnaker/interfaces.ExposeConfig"),
						},
					},
					"accounts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/spinnaker/interfaces.AccountConfig"),
						},
					},
					"kustomize": {
						SchemaProps: spec.SchemaProps{
							Description: "Patch Kustomization of service and deployment per service",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.ServiceKustomization"),
									},
								},
							},
						},
					},
				},
				Required: []string{"spinnakerConfig"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/spinnaker/interfaces.AccountConfig", "./pkg/apis/spinnaker/interfaces.ExposeConfig", "./pkg/apis/spinnaker/interfaces.ServiceKustomization", "./pkg/apis/spinnaker/interfaces.SpinnakerConfig", "./pkg/apis/spinnaker/interfaces.SpinnakerValidation"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_SpinnakerServiceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SpinnakerServiceStatus defines the observed state of SpinnakerService",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Current deployed version of Spinnaker",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastDeployed": {
						SchemaProps: spec.SchemaProps{
							Description: "Last deployed hashes",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.HashStatus"),
									},
								},
							},
						},
					},
					"services": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": "name",
								"x-kubernetes-list-type":     "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Services deployment information",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.SpinnakerDeploymentStatus"),
									},
								},
							},
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Overall Spinnaker status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceCount": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of services in Spinnaker",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"uiUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "Exposed Deck URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "Exposed Gate URL",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"accountCount": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of accounts",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/spinnaker/interfaces.HashStatus", "./pkg/apis/spinnaker/interfaces.SpinnakerDeploymentStatus"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_SpinnakerValidation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "validation settings for the deployment",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"failOnError": {
						SchemaProps: spec.SchemaProps{
							Description: "Report errors but do not fail validation, defaults to true",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"frequencySeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds between each validation",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"failFast": {
						SchemaProps: spec.SchemaProps{
							Description: "Fail validation on the first failed validation, defaults to false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"providers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.ValidationSetting"),
									},
								},
							},
						},
					},
					"persistentStorage": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.ValidationSetting"),
									},
								},
							},
						},
					},
					"metricStores": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.ValidationSetting"),
									},
								},
							},
						},
					},
					"notifications": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.ValidationSetting"),
									},
								},
							},
						},
					},
					"ci": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.ValidationSetting"),
									},
								},
							},
						},
					},
					"pubsub": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.ValidationSetting"),
									},
								},
							},
						},
					},
					"canary": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/spinnaker/interfaces.ValidationSetting"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/spinnaker/interfaces.ValidationSetting", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_pkg_apis_spinnaker_interfaces_ValidationSetting(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable or disable validation, defaults to false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"failOnError": {
						SchemaProps: spec.SchemaProps{
							Description: "Report errors but do not fail validation, defaults to true",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"frequencySeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds between each validation",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}
