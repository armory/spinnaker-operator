// Code generated by MockGen. DO NOT EDIT.
// Source: k8s_lookup.go

// Package util is a generated GoMock package.
package util

import (
	interfaces "github.com/armory/spinnaker-operator/pkg/api/interfaces"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
	reflect "reflect"
)

// MockIk8sLookup is a mock of Ik8sLookup interface
type MockIk8sLookup struct {
	ctrl     *gomock.Controller
	recorder *MockIk8sLookupMockRecorder
}

// MockIk8sLookupMockRecorder is the mock recorder for MockIk8sLookup
type MockIk8sLookupMockRecorder struct {
	mock *MockIk8sLookup
}

// NewMockIk8sLookup creates a new mock instance
func NewMockIk8sLookup(ctrl *gomock.Controller) *MockIk8sLookup {
	mock := &MockIk8sLookup{ctrl: ctrl}
	mock.recorder = &MockIk8sLookupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIk8sLookup) EXPECT() *MockIk8sLookupMockRecorder {
	return m.recorder
}

// GetSpinnakerDeployments mocks base method
func (m *MockIk8sLookup) GetSpinnakerDeployments(instance interfaces.SpinnakerService) ([]v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpinnakerDeployments", instance)
	ret0, _ := ret[0].([]v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpinnakerDeployments indicates an expected call of GetSpinnakerDeployments
func (mr *MockIk8sLookupMockRecorder) GetSpinnakerDeployments(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpinnakerDeployments", reflect.TypeOf((*MockIk8sLookup)(nil).GetSpinnakerDeployments), instance)
}

// GetSpinnakerServiceImageFromDeployment mocks base method
func (m *MockIk8sLookup) GetSpinnakerServiceImageFromDeployment(p v10.PodSpec) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpinnakerServiceImageFromDeployment", p)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSpinnakerServiceImageFromDeployment indicates an expected call of GetSpinnakerServiceImageFromDeployment
func (mr *MockIk8sLookupMockRecorder) GetSpinnakerServiceImageFromDeployment(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpinnakerServiceImageFromDeployment", reflect.TypeOf((*MockIk8sLookup)(nil).GetSpinnakerServiceImageFromDeployment), p)
}

// GetPodsByDeployment mocks base method
func (m *MockIk8sLookup) GetPodsByDeployment(instance interfaces.SpinnakerService, deployment v1.Deployment) ([]v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodsByDeployment", instance, deployment)
	ret0, _ := ret[0].([]v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodsByDeployment indicates an expected call of GetPodsByDeployment
func (mr *MockIk8sLookupMockRecorder) GetPodsByDeployment(instance, deployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodsByDeployment", reflect.TypeOf((*MockIk8sLookup)(nil).GetPodsByDeployment), instance, deployment)
}

// GetReplicaSetByPod mocks base method
func (m *MockIk8sLookup) GetReplicaSetByPod(instance interfaces.SpinnakerService, pod v10.Pod) (*v1.ReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaSetByPod", instance, pod)
	ret0, _ := ret[0].(*v1.ReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaSetByPod indicates an expected call of GetReplicaSetByPod
func (mr *MockIk8sLookupMockRecorder) GetReplicaSetByPod(instance, pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaSetByPod", reflect.TypeOf((*MockIk8sLookup)(nil).GetReplicaSetByPod), instance, pod)
}

// HasExceededMaxWaitingTime mocks base method
func (m *MockIk8sLookup) HasExceededMaxWaitingTime(instance interfaces.SpinnakerService, pod v10.Pod) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasExceededMaxWaitingTime", instance, pod)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasExceededMaxWaitingTime indicates an expected call of HasExceededMaxWaitingTime
func (mr *MockIk8sLookupMockRecorder) HasExceededMaxWaitingTime(instance, pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasExceededMaxWaitingTime", reflect.TypeOf((*MockIk8sLookup)(nil).HasExceededMaxWaitingTime), instance, pod)
}
